---
title: "Материалы курса"
---

## Лекция 1: Введение в R и RStudio {#sec-l1}

- Знакомство
- Почему R
- План модуля

- R как калькулятор, операторы
- Функции
- Присвоение переменных
- Векторы
- Векторизация
- Ресайклинг

```{r}
#| eval: false
#| echo: true
# Арифметические операторы ------------------------------------------------

1 - 1 #это комментарий
# 2 + 2 
3 * 3
4 / 4
5 ^ 5
(2 + 2) * 2

# Функции -----------------------------------------------------------------

abs(-10)
?abs
round(pi)
?round
round(pi, 4)
round(x = pi, digits = 4)

# Присвоение переменных ---------------------------------------------------
a <- 3
a <- 4
a
b <- -4
b

abs(b)

a == abs(b)

a == b
a != b
# Векторы -----------------------------------------------------------------

c(a, b)
c(a, b) #ошибка, потому что с написано кириллицей!
-10:3
3:-10

age <- c(30, 20, 35, 27, 32)
age

age[1]
length(age)
age[length(age)]

age[1] <- 25
age
age[2:3]

age[2, 3] #не работает
age[c(2, 3)] # работает

## Задание
## верните первый и четвертый элемент вектора age
age[c(1, 4)]

sum(age)
mean(age)
min(age)
max(age)

age_of_work <- c(20, 18, 25, 20, 20)
## Задание: посчитать сумму, среднее, минимум и максимум для age_of_work

# Векторизация ------------------------------------------------------------
age <- c(25, 20, 35, 27, 32)

age - age_of_work

age * age_of_work
age ^ age_of_work #большие числа --> научная запись числа

#3.486784e+29 = 10 ^ 29 * 3.486784

pi / 1000000 

#маленькие числа --> тоже научная запись числа
#3.141593e-06 = 10 ^ -6 * 3.141593

options(scipen = 999) #отключаем научную запись числа
age ^ age_of_work
pi / 1000000 

# Задание: Создайте вектор 1^1 2^2 3^3 4^4 5^5


-2:2
abs(-2:2)
log(age)
sin(age)

age > 25
age >= 25

# Ресайклинг -------------------------------------------------------------

n <- 1:4 
k <- c(10, 100)
n * k
n * 10

age * 365

# Задание: Посчитайте количество секунд в age

# Индексирование векторов -------------------------------------------------
age
age[age > 25]
age[age >= 25]
age[age == 25]
age[age != 25]

mean(age)
age[c(1, 3, 5)]
age[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
age[age > mean(age)]

age[age < 0]
## Задание: верните значения выше среднего из age_of_work
## верните значения ниже среднего из age_of_work
```

## Семинар 1: Введение в R и RStudio {#sec-s1}

### Решение заданий на создание векторов

-   Создайте вектор из значений 2, 30 и 4000.

```{r}
c(2, 30, 4000)
```

-   Создайте вектор от 1 до 20.

```{r}
1:20
```

-   Создайте вектор от 20 до 1.

```{r}
20:1
```

Функция `sum()` возвращает сумму элементов вектора на входе. Посчитайте сумму первых 100 натуральных чисел (т.е. всех целых чисел от 1 до 100).

```{r}
sum(1:100)
```

-   Создайте вектор от 1 до 20 и снова до 1. Число 20 должно присутствовать только один раз!

```{r}
c(1:20, 19:1)
```

-   Создайте вектор значений 5, 4, 3, 2, 2, 3, 4, 5:

```{r}
c(5:2, 2:5)
```

-   Создайте вектор 2, 4, 6, ... , 18, 20.

```{r}
seq(2, 20, 2)
```

-   Создайте вектор 0.1, 0.2, 0.3, ..., 0.9, 1.

```{r}
seq(0.1, 1, 0.1)
```

-   2020 год -- високосный. Следующий високосный год через 4 года -- это будет 2024 год. Составьте календарь всех високосных годов XXI века, начиная с 2020 года.

> 2100 год относится к XXI веку, а не к XXII.

```{r}
seq(2020, 2100, 4)
```

-   Создайте вектор, состоящий из 20 повторений "Хэй!".

```{r}
rep("Хэй!", 20)
```

-   Как я и говорил, многие функции, работающие с одним значением на входе, так же прекрасно работают и с целыми векторами. Попробуйте посчитать квадратный корень чисел от 1 до 10 с помощью функции `sqrt()` и сохраните результат в векторе `roots`. Выведите содержание вектора `roots` в консоль.

```{r}
roots <- sqrt(1:10)
roots
```

-   \*Создайте вектор из одной единицы, двух двоек, трех троек, .... , девяти девяток.

```{r}
rep(1:9, 1:9)
```

### Решение заданий на векторизацию

-   Создайте вектор `p`, состоящий из значений 4, 5, 6, 7, и вектор `q`, состоящий из 0, 1, 2, 3.

```{r}
p <- 4:7
p
q <- 0:3
q
```

-   Посчитайте поэлементную сумму векторов `p` и `q`:

```{r}
p + q
```

-   Посчитайте поэлементную разницу `p` и `q`:

```{r}
p - q
```

-   Поделите каждый элемент вектора `p` на соответствующий ему элемент вектора `q`:

> О, да, Вам нужно делить на 0!

```{r}
p / q
```

-   Возведите каждый элемент вектора `p` в степень соответствующего ему элемента вектора `q`:

```{r}
p ^ q
```

-   Умножьте каждое значение вектора `p` на 10.

```{r}
p * 10
```

-   Создайте вектор квадратов чисел от 1 до 10:

```{r}
(1:10)^2
```

-   Создайте вектор 0, 2, 0, 4, ... , 18, 0, 20.

```{r}
1:20 * 0:1
```

-   Создайте вектор 1, 0, 3, 0, 5, ..., 17, 0, 19, 0.

```{r}
1:20 * 1:0
```

-   \*Создайте вектор, в котором будут содержаться первые 20 степеней двойки.

```{r}
2 ^ (1:20)
```

-   \*Создайте вектор из чисел 1, 10, 100, 1000, 10000:

```{r}
10 ^ (0:4)
```

-   \*Посчитать сумму последовательности $\frac{1}{1 \cdot 2}+\frac{1}{2 \cdot 3}+\frac{1}{3 \cdot 4}+\ldots+\frac{1}{50 \cdot 51}$.

```{r}
sum(1 / (1:50 * 2:51))
```

-   \*Посчитать сумму последовательности $\frac{1}{2^{0}}+\frac{1}{2^{1}}+\frac{1}{2^{2}}+\frac{1}{2^{3}}+\ldots \frac{1}{2^{20}}$.

```{r}
sum(1 / 2 ^ (0:20))
```

-   \*Посчитать сумму последовательности $1+\frac{4}{3}+\frac{7}{9}+\frac{10}{27}+\frac{13}{81}+\ldots+\frac{28}{19683}$.

```{r}
sum((3 * (1:10) - 2) / 3 ^ (0:9))
```

-   \*Сколько чисел из последовательности $1+\frac{4}{3}+\frac{7}{9}+\frac{10}{27}+\frac{13}{81}+\ldots+\frac{28}{19683}$ больше чем 0.5?

```{r}
sum((3 * (1:10) - 2) / 3 ^ (0:9) > 0.5)
```


## Лекция 2: Сложные структуры {#sec-l2}

- NA
- Логические векторы

```{r}
#| echo: true
#| eval: false
# NA ----------------------------------------------------------------------

age[3] <- NA
age
mean(age)
age == NA
NA == NA
is.na(age)

age[is.na(age)]
age[!is.na(age)]

mean(age[!is.na(age)])
mean(age, na.rm = TRUE)

# Приведение типов --------------------------------------------------------

name <- c("Anya", "Tanya", "Vasya", "Petya", "Andrey")
name
student <- c(TRUE, FALSE, TRUE, FALSE, TRUE)
c(age, name, student)

as.character(age)
as.numeric(student)
as.logical(c(1, 0, 1, 0, 1))
as.numeric(c("1", "2", "tri")) #NA!

is.numeric(age)
is.character(age)
```


- Матрицы
- Списки
- Датафреймы

## Семинар 2: Сложные структуры {#sec-s2}

- Задания на матрицы, списки и датафреймы

## Лекция 3: Установка пакетов и импорт данных, tidyverse {#sec-l3}

- установка пакетов
- импорт данных
- {skimr}
- RStudio проекты
- data.table vs tidyverse

## Семинар 3: Введение в tidyverse {#sec-s3}

- tidyverse intro: `select()`, `slice()`, `filter()`, `mutate()`

## Лекция 4: Продвинутый tidyverse {#sec-l4}

- tidyverse: аггрегация, *_join(), nested columns, `across()`, {purrr}

## Семинар 4: Продвинутый tidyverse {#sec-s4}

- задания на tidyverse: аггрегация, join, nested columns, `across()`


## Лекция 5: {ggplot2} {#sec-l5}

- Грамматика графики
- Зачем нужна грамматика
- Компоненты слоя: данные, геометрия, отображение эстетики, статистика, подгонка позиции
- Шкалы (scales)
- Координатные системы
- Фасетки
- Темы

## Семинар 5: {ggplot2} {#sec-s5}

- Строим графики

## Дополнительная лекция: Quarto {#sec-l6}

- Quarto

## Дополнительный семинар: Quarto / темы по запросу {#sec-s6}

- Практика Quarto
- Дополнительные темы по запросу